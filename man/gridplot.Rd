% Generated by roxygen2 (4.1.1): do not edit by hand
% Please edit documentation in R/gridplot.R
\name{gridplot}
\alias{gridplot}
\title{Plot Multidimensional Sequence Plots in a Grid}
\usage{
gridplot(x, rows = NA, cols = NA, byrow = FALSE, withlegend = "auto",
  legend.pos = "auto", legend.pos2 = "top", title.legend = "auto",
  ncol.legend = "auto", with.missing.legend = "auto", row.prop = "auto",
  col.prop = "auto", cex.legend = 1)
}
\arguments{
\item{x}{A list of \code{ssp} objects.}

\item{rows,cols}{Optional arguments to arrange plots.}

\item{byrow}{Controls the order of plotting. Defaults to \code{FALSE}, i.e. plots
  are arranged columnwise.}

\item{withlegend}{Defines if and how the legends for the states are plotted.
  The default value \code{"auto"} (equivalent to \code{TRUE} and
  \code{"many"}) creates separate legends for each requested plot. Other
  possibilities are \code{"combined"} (all legends combined) and \code{FALSE}
  (no legend).}

\item{legend.pos}{Defines the positions of the legend boxes relative to the
  whole plot. Either one of \code{"bottom"} (equivalent to \code{"auto"}) or
  \code{"right"}, or a numerical vector of grid cells (by order) to print the
  legends to (the cells must be in one row/column).}

\item{legend.pos2}{Defines the positions of the legend boxes relative to the
  cell(s). One of \code{"bottomright"}, \code{"bottom"}, \code{"bottomleft"},
  \code{"left"}, \code{"topleft"}, \code{"top"} (the default), \code{"topright"},
  \code{"right"} and \code{"center"}.}

\item{title.legend}{The titles for the legend boxes. The default \code{"auto"} takes
  the titles from the channel labels provided by the first object in \code{x}.
  \code{NA} prints no title.}

\item{ncol.legend}{(A vector of) the number of columns for the legend(s). The
  default \code{"auto"} creates one column for each legend.}

\item{with.missing.legend}{If set to \code{"auto"} (the default), a legend
  for the missing state is added automatically if one or more of the
  sequences in data contains missing states. With the value \code{TRUE} a
  legend for the missing state is added in any case; equivalently
  \code{FALSE} omits the legend for the missing state.}

\item{row.prop}{Sets the proportions of the row heights of the grid. The default
  value is \code{"auto"} for even row heights. Takes a vector of values from
  0 to 1, with values summing to 1.}

\item{col.prop}{Sets the proportion of the column heights of the grid. The default
  value is \code{"auto"} for even column widths. Takes a vector of values
  from 0 to 1, with values summing to 1.}

\item{cex.legend}{Expansion factor for setting the size of the font for the
  labels in the legend. The default value is 1. Values lesser than 1 will
  reduce the size of the font, values greater than 1 will increase the size.}
}
\description{
Function \code{gridplot} plots multiple \code{ssp} objects to a
grid.
}
\examples{
require(TraMineR)
data(biofam)
biofam <- biofam[1:500,]

## Building one channel per type of event left, children or married
bf <- as.matrix(biofam[, 10:25])
children <-  bf == 4 | bf == 5 | bf == 6
married <- bf == 2 | bf == 3 | bf == 6
left <- bf == 1 | bf == 3 | bf == 5 | bf == 6

children[children == TRUE] <- "Children"
children[children == FALSE] <- "Childless"

married[married == TRUE] <- "Married"
married[married == FALSE] <- "Single"

left[left == TRUE] <- "Left home"
left[left == FALSE] <- "With parents"

## Building sequence objects
child.seq <- seqdef(children)
marr.seq <- seqdef(married)
left.seq <- seqdef(left)

## Choosing colors
attr(child.seq, "cpal") <- c("#66C2A5", "#FC8D62")
attr(marr.seq, "cpal") <- c("#E7298A", "#E6AB02")
attr(left.seq, "cpal") <- c("#A6CEE3", "#E31A1C")


# Preparing plot for state distribution plots of observations for women
ssp_f <- ssp(
  list(child.seq[biofam$sex == "woman",], marr.seq[biofam$sex == "woman",],
       left.seq[biofam$sex == "woman",]),
  type = "d", plots = "obs", title = "Women",
  ylab = c("Children", "Married", "Left home")
  )

# Preparing plot for state distribution plots of observations for men
ssp_m <- ssp(
  list(child.seq[biofam$sex == "man",], marr.seq[biofam$sex == "man",],
       left.seq[biofam$sex == "man",]),
  type = "d", plots = "obs", title = "Men",
  ylab = c("Children", "Married", "Left home")
  )

# Plotting state distribution plots of observations for women and men in two columns
gridplot(list(ssp_f, ssp_m), cols = 2, withlegend = FALSE)

# Preparing plots for women's state distributions
ssp_f2 <- ssp(
  list(marr.seq[bio$sex == "woman",], child.seq[bio$sex == "woman",],
       left.seq[bio$sex == "woman",]),
  type = "d", border = NA, withlegend = FALSE,
  title = "State distributions for women", title.n = FALSE, xtlab = 15:30,
  ylab.pos = c(1, 2, 1), ylab = c("Married", "Children", "Left home")
  )

# The same plot with sequences instead of state distributions
ssp_f3 <- update(
  ssp_f2, type = "I", sortv="mds.obs", title = "Sequences for women"
  )

# State distributions with men's data
ssp_m2 <- update(
  ssp_f2, title = "State distributions for men",
  x = list(marr.seq[bio$sex == "man",], child.seq[bio$sex == "man",],
           left.seq[bio$sex == "man",])
  )

# Men's sequences
ssp_m3 <- update(
  ssp_m2, type = "I", sortv="mds.obs", title = "Sequences for women"
  )

# Plotting state distributions and index plots of observations
# for women and men in two columns
gridplot(
  list(ssp_f2, ssp_f3, ssp_m2, ssp_m3), cols=3, byrow=TRUE,
  withlegend="combined", legend.pos="right", col.prop=c(0.35,0.35,0.3)
  )

# The same with different positioning
gridplot(
  list(ssp_f2, ssp_f3, ssp_m2, ssp_m3), cols = 2, rows = 3, byrow=TRUE,
  # defining the legend positions by the cell numbers
  legend.pos = 3:4
  )
}
\seealso{
\code{\link{ssp}} for defining the plot before using
  \code{gridplot}, and \code{\link{plot.ssp}} for plotting only one ssp object.
}

