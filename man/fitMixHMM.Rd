% Generated by roxygen2 (4.1.1): do not edit by hand
% Please edit documentation in R/fitMixHMM.R
\name{fitMixHMM}
\alias{fitMixHMM}
\title{Estimate Parameters of Mixture Hidden Markov Model}
\usage{
fitMixHMM(model, use.em = TRUE, use.optimx = TRUE, em.control = list(),
  method = "BFGS", itnmax = 10000, optimx.control = list(), ...)
}
\arguments{
\item{model}{Hidden Markov model of class \code{mixHMModel}.}

\item{method}{Optimization method used by \code{optimx}. Default is
\code{"BFGS"}. Note that \code{fitHMM} uses Softmax parameterization so
unconstrained optimization methods are used.}

\item{itnmax}{Maximum number of iterations use by \code{optimx}. Default is
10000.}

\item{optimx.control}{Optional list of additional arguments for
\code{\link{optimx}} argument \code{control}. Note that default values for
\code{starttests} and \code{kkt} are set to \code{FALSE}, which differs
from the default behaviour of \code{optimx}. If EM algorithm is used,
\code{fnscale} is also set to current optimum (unless modified by user).}

\item{...}{Additional arguments to optimx.}
}
\value{
List with components \item{model}{Estimated model. }
  \item{logLik}{Log-likelihood of the estimated model. }
  \item{optimx.results}{Results from direct numerical optimization via
  \code{\link{optimx}}. }
}
\description{
Function \code{fitMixHMM} estimates a mixture of hidden Markov models
using numerical maximization of log-likelihood. Initial values for estimation
are taken from the corresponding components of the model with preservation of
original zero probabilities.
}
\examples{
\dontrun{
require(TraMineR)

data(biofam)
biofam <- biofam[complete.cases(biofam[c(2:4)]),]
biofam <- biofam[1:500,]

## Building one channel per type of event left, children or married
bf <- as.matrix(biofam[, 10:25])
children <-  bf==4 | bf==5 | bf==6
married <- bf == 2 | bf== 3 | bf==6
left <- bf==1 | bf==3 | bf==5 | bf==6 | bf==7

children[children==TRUE] <- "Children"
children[children==FALSE] <- "Childless"
# Divorced parents
div <- bf[(rowSums(bf==7)>0 & rowSums(bf==5)>0) |
            (rowSums(bf==7)>0 & rowSums(bf==6)>0),]
children[rownames(bf) \%in\% rownames(div) & bf==7] <- "Children"

married[married==TRUE] <- "Married"
married[married==FALSE] <- "Single"
married[bf==7] <- "Divorced"

left[left==TRUE] <- "Left home"
left[left==FALSE] <- "With parents"
# Divorced living with parents (before divorce)
wp <- bf[(rowSums(bf==7)>0 & rowSums(bf==2)>0 & rowSums(bf==3)==0 &
          rowSums(bf==5)==0 & rowSums(bf==6)==0) |
           (rowSums(bf==7)>0 & rowSums(bf==4)>0 & rowSums(bf==3)==0 &
          rowSums(bf==5)==0 & rowSums(bf==6)==0),]
left[rownames(bf) \%in\% rownames(wp) & bf==7] <- "With parents"

## Building sequence objects
child.seq <- seqdef(children, start=15)
marr.seq <- seqdef(married, start=15)
left.seq <- seqdef(left, start=15)

## Starting values for emission probabilities

# Cluster 1
alphabet(child.seq) # Checking for the order of observed states
B1_child <- matrix(c(0.99, 0.01, # High probability for childless
                     0.99, 0.01,
                     0.99, 0.01,
                     0.99, 0.01), nrow=4, ncol=2, byrow=TRUE)

alphabet(marr.seq)
B1_marr <- matrix(c(0.01, 0.01, 0.98, # High probability for single
                    0.01, 0.01, 0.98,
                    0.01, 0.98, 0.01, # High probability for married
                    0.98, 0.01, 0.01), # High probability for divorced
                    nrow=4, ncol=3, byrow=TRUE)

alphabet(left.seq)
B1_left <- matrix(c(0.01, 0.99, # High probability for living with parents
                    0.99, 0.01, # High probability for having left home
                    0.99, 0.01,
                    0.99, 0.01), nrow=4, ncol=2, byrow=TRUE)

# Cluster 2
B2_child <- matrix(c(0.99, 0.01, # High probability for childless
                     0.99, 0.01,
                     0.99, 0.01,
                     0.01, 0.99), nrow=4, ncol=2, byrow=TRUE)

B2_marr <- matrix(c(0.01, 0.01, 0.98, # High probability for single
                    0.01, 0.01, 0.98,
                    0.01, 0.98, 0.01, # High probability for married
                    0.29, 0.7, 0.01),
                   nrow=4, ncol=3, byrow=TRUE)

B2_left <- matrix(c(0.01, 0.99, # High probability for living with parents
                    0.99, 0.01,
                    0.99, 0.01,
                    0.99, 0.01), nrow=4, ncol=2, byrow=TRUE)

# Cluster 3
B3_child <- matrix(c(0.99, 0.01, # High probability for childless
                     0.99, 0.01,
                     0.01, 0.99,
                     0.99, 0.01,
                     0.01, 0.99,
                     0.01, 0.99), nrow=6, ncol=2, byrow=TRUE)

B3_marr <- matrix(c(0.01, 0.01, 0.98, # High probability for single
                    0.01, 0.01, 0.98,
                    0.01, 0.01, 0.98,
                    0.01, 0.98, 0.01,
                    0.01, 0.98, 0.01, # High probability for married
                    0.98, 0.01, 0.01), # High probability for divorced
                   nrow=6, ncol=3, byrow=TRUE)

B3_left <- matrix(c(0.01, 0.99, # High probability for living with parents
                    0.99, 0.01,
                    0.50, 0.50,
                    0.01, 0.99,
                    0.99, 0.01,
                    0.99, 0.01), nrow=6, ncol=2, byrow=TRUE)

# Initial values for transition matrices
A1 <- matrix(c(0.8,   0.16, 0.03, 0.01,
                 0,    0.9, 0.07, 0.03,
                 0,      0,  0.9,  0.1,
                 0,      0,    0,    1),
             nrow=4, ncol=4, byrow=TRUE)

A2 <- matrix(c(0.8, 0.10, 0.05,  0.03, 0.01, 0.01,
                 0,  0.7,  0.1,   0.1, 0.05, 0.05,
                 0,    0, 0.85,  0.01,  0.1, 0.04,
                 0,    0,    0,   0.9, 0.05, 0.05,
                 0,    0,    0,     0,  0.9,  0.1,
                 0,    0,    0,     0,    0,    1),
             nrow=6, ncol=6, byrow=TRUE)

# Initial values for initial state probabilities
initialProbs1 <- c(0.9, 0.07, 0.02, 0.01)
initialProbs2 <- c(0.9, 0.04, 0.03, 0.01, 0.01, 0.01)

# Creating covariate swiss
biofam$swiss <- biofam$nat_1_02=="Switzerland"
biofam$swiss[biofam$swiss==TRUE] <- "Swiss"
biofam$swiss[biofam$swiss==FALSE] <- "Other"

# Build mixture HMM
bmHMM <- buildMixHMM(observations=list(child.seq, marr.seq, left.seq),
                       transitionMatrix=list(A1,A1,A2),
                       emissionMatrix=list(list(B1_child, B1_marr, B1_left),
                                           list(B2_child, B2_marr, B2_left),
                                           list(B3_child, B3_marr, B3_left)),
                       initialProbs=list(initialProbs1, initialProbs1,
                                         initialProbs2),
                       formula=~sex*birthyr+sex*swiss, data=biofam,
                       clusterNames=c("Cluster 1", "Cluster 2", "Cluster 3"),
                       channelNames=c("Parenthood", "Marriage", "Left home"),
                       )

mHMM <- fitMixHMM(bmHMM)

# Coefficients of covariates
mHMM$model$beta

# Probabilities of belonging to each model for the first six subjects
head(mHMM$model$clusterProb)
}
}
\seealso{
\code{\link{buildMixHMM}} for building mixture HMM's;
\code{\link{buildHMM}} and \code{\link{fitHMM}} for building and
  fitting hidden Markov models without covariates; \code{\link{plot.mixHMModel}}
  for plotting \code{mixHMModel} objects and \code{\link{mssplot}} for plotting
  stacked sequence plots of \code{mixHMModel} objects.
}

