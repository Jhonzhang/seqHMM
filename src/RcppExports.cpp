// This file was generated by Rcpp::compileAttributes
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include <RcppArmadillo.h>
#include <Rcpp.h>

using namespace Rcpp;

// EM
List EM(NumericVector transitionMatrix, NumericVector emissionArray, NumericVector initialProbs, IntegerVector obsArray, IntegerVector nSymbols, int itermax, double tol, int trace, int threads);
RcppExport SEXP seqHMM_EM(SEXP transitionMatrixSEXP, SEXP emissionArraySEXP, SEXP initialProbsSEXP, SEXP obsArraySEXP, SEXP nSymbolsSEXP, SEXP itermaxSEXP, SEXP tolSEXP, SEXP traceSEXP, SEXP threadsSEXP) {
BEGIN_RCPP
    Rcpp::RObject __result;
    Rcpp::RNGScope __rngScope;
    Rcpp::traits::input_parameter< NumericVector >::type transitionMatrix(transitionMatrixSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type emissionArray(emissionArraySEXP);
    Rcpp::traits::input_parameter< NumericVector >::type initialProbs(initialProbsSEXP);
    Rcpp::traits::input_parameter< IntegerVector >::type obsArray(obsArraySEXP);
    Rcpp::traits::input_parameter< IntegerVector >::type nSymbols(nSymbolsSEXP);
    Rcpp::traits::input_parameter< int >::type itermax(itermaxSEXP);
    Rcpp::traits::input_parameter< double >::type tol(tolSEXP);
    Rcpp::traits::input_parameter< int >::type trace(traceSEXP);
    Rcpp::traits::input_parameter< int >::type threads(threadsSEXP);
    __result = Rcpp::wrap(EM(transitionMatrix, emissionArray, initialProbs, obsArray, nSymbols, itermax, tol, trace, threads));
    return __result;
END_RCPP
}
// EMx
List EMx(NumericVector transitionMatrix, NumericVector emissionArray, NumericVector initialProbs, IntegerVector obsArray, IntegerVector nSymbols, NumericMatrix coefs, NumericMatrix X_, IntegerVector numberOfStates, int itermax, double tol, int trace, int threads);
RcppExport SEXP seqHMM_EMx(SEXP transitionMatrixSEXP, SEXP emissionArraySEXP, SEXP initialProbsSEXP, SEXP obsArraySEXP, SEXP nSymbolsSEXP, SEXP coefsSEXP, SEXP X_SEXP, SEXP numberOfStatesSEXP, SEXP itermaxSEXP, SEXP tolSEXP, SEXP traceSEXP, SEXP threadsSEXP) {
BEGIN_RCPP
    Rcpp::RObject __result;
    Rcpp::RNGScope __rngScope;
    Rcpp::traits::input_parameter< NumericVector >::type transitionMatrix(transitionMatrixSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type emissionArray(emissionArraySEXP);
    Rcpp::traits::input_parameter< NumericVector >::type initialProbs(initialProbsSEXP);
    Rcpp::traits::input_parameter< IntegerVector >::type obsArray(obsArraySEXP);
    Rcpp::traits::input_parameter< IntegerVector >::type nSymbols(nSymbolsSEXP);
    Rcpp::traits::input_parameter< NumericMatrix >::type coefs(coefsSEXP);
    Rcpp::traits::input_parameter< NumericMatrix >::type X_(X_SEXP);
    Rcpp::traits::input_parameter< IntegerVector >::type numberOfStates(numberOfStatesSEXP);
    Rcpp::traits::input_parameter< int >::type itermax(itermaxSEXP);
    Rcpp::traits::input_parameter< double >::type tol(tolSEXP);
    Rcpp::traits::input_parameter< int >::type trace(traceSEXP);
    Rcpp::traits::input_parameter< int >::type threads(threadsSEXP);
    __result = Rcpp::wrap(EMx(transitionMatrix, emissionArray, initialProbs, obsArray, nSymbols, coefs, X_, numberOfStates, itermax, tol, trace, threads));
    return __result;
END_RCPP
}
// forwardbackward
List forwardbackward(NumericVector transitionMatrix, NumericVector emissionArray, NumericVector initialProbs, IntegerVector obsArray, bool forwardonly, int threads);
RcppExport SEXP seqHMM_forwardbackward(SEXP transitionMatrixSEXP, SEXP emissionArraySEXP, SEXP initialProbsSEXP, SEXP obsArraySEXP, SEXP forwardonlySEXP, SEXP threadsSEXP) {
BEGIN_RCPP
    Rcpp::RObject __result;
    Rcpp::RNGScope __rngScope;
    Rcpp::traits::input_parameter< NumericVector >::type transitionMatrix(transitionMatrixSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type emissionArray(emissionArraySEXP);
    Rcpp::traits::input_parameter< NumericVector >::type initialProbs(initialProbsSEXP);
    Rcpp::traits::input_parameter< IntegerVector >::type obsArray(obsArraySEXP);
    Rcpp::traits::input_parameter< bool >::type forwardonly(forwardonlySEXP);
    Rcpp::traits::input_parameter< int >::type threads(threadsSEXP);
    __result = Rcpp::wrap(forwardbackward(transitionMatrix, emissionArray, initialProbs, obsArray, forwardonly, threads));
    return __result;
END_RCPP
}
// forwardbackwardx
List forwardbackwardx(NumericVector transitionMatrix, NumericVector emissionArray, NumericVector initialProbs, IntegerVector obsArray, NumericMatrix coefs, NumericMatrix X_, IntegerVector numberOfStates, bool forwardonly, int threads);
RcppExport SEXP seqHMM_forwardbackwardx(SEXP transitionMatrixSEXP, SEXP emissionArraySEXP, SEXP initialProbsSEXP, SEXP obsArraySEXP, SEXP coefsSEXP, SEXP X_SEXP, SEXP numberOfStatesSEXP, SEXP forwardonlySEXP, SEXP threadsSEXP) {
BEGIN_RCPP
    Rcpp::RObject __result;
    Rcpp::RNGScope __rngScope;
    Rcpp::traits::input_parameter< NumericVector >::type transitionMatrix(transitionMatrixSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type emissionArray(emissionArraySEXP);
    Rcpp::traits::input_parameter< NumericVector >::type initialProbs(initialProbsSEXP);
    Rcpp::traits::input_parameter< IntegerVector >::type obsArray(obsArraySEXP);
    Rcpp::traits::input_parameter< NumericMatrix >::type coefs(coefsSEXP);
    Rcpp::traits::input_parameter< NumericMatrix >::type X_(X_SEXP);
    Rcpp::traits::input_parameter< IntegerVector >::type numberOfStates(numberOfStatesSEXP);
    Rcpp::traits::input_parameter< bool >::type forwardonly(forwardonlySEXP);
    Rcpp::traits::input_parameter< int >::type threads(threadsSEXP);
    __result = Rcpp::wrap(forwardbackwardx(transitionMatrix, emissionArray, initialProbs, obsArray, coefs, X_, numberOfStates, forwardonly, threads));
    return __result;
END_RCPP
}
// log_EM
List log_EM(NumericVector transitionMatrix, NumericVector emissionArray, NumericVector initialProbs, IntegerVector obsArray, IntegerVector nSymbols, int itermax, double tol, int trace, int threads);
RcppExport SEXP seqHMM_log_EM(SEXP transitionMatrixSEXP, SEXP emissionArraySEXP, SEXP initialProbsSEXP, SEXP obsArraySEXP, SEXP nSymbolsSEXP, SEXP itermaxSEXP, SEXP tolSEXP, SEXP traceSEXP, SEXP threadsSEXP) {
BEGIN_RCPP
    Rcpp::RObject __result;
    Rcpp::RNGScope __rngScope;
    Rcpp::traits::input_parameter< NumericVector >::type transitionMatrix(transitionMatrixSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type emissionArray(emissionArraySEXP);
    Rcpp::traits::input_parameter< NumericVector >::type initialProbs(initialProbsSEXP);
    Rcpp::traits::input_parameter< IntegerVector >::type obsArray(obsArraySEXP);
    Rcpp::traits::input_parameter< IntegerVector >::type nSymbols(nSymbolsSEXP);
    Rcpp::traits::input_parameter< int >::type itermax(itermaxSEXP);
    Rcpp::traits::input_parameter< double >::type tol(tolSEXP);
    Rcpp::traits::input_parameter< int >::type trace(traceSEXP);
    Rcpp::traits::input_parameter< int >::type threads(threadsSEXP);
    __result = Rcpp::wrap(log_EM(transitionMatrix, emissionArray, initialProbs, obsArray, nSymbols, itermax, tol, trace, threads));
    return __result;
END_RCPP
}
// log_EMx
List log_EMx(NumericVector transitionMatrix, NumericVector emissionArray, NumericVector initialProbs, IntegerVector obsArray, IntegerVector nSymbols, NumericMatrix coefs, NumericMatrix X_, IntegerVector numberOfStates, int itermax, double tol, int trace, int threads);
RcppExport SEXP seqHMM_log_EMx(SEXP transitionMatrixSEXP, SEXP emissionArraySEXP, SEXP initialProbsSEXP, SEXP obsArraySEXP, SEXP nSymbolsSEXP, SEXP coefsSEXP, SEXP X_SEXP, SEXP numberOfStatesSEXP, SEXP itermaxSEXP, SEXP tolSEXP, SEXP traceSEXP, SEXP threadsSEXP) {
BEGIN_RCPP
    Rcpp::RObject __result;
    Rcpp::RNGScope __rngScope;
    Rcpp::traits::input_parameter< NumericVector >::type transitionMatrix(transitionMatrixSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type emissionArray(emissionArraySEXP);
    Rcpp::traits::input_parameter< NumericVector >::type initialProbs(initialProbsSEXP);
    Rcpp::traits::input_parameter< IntegerVector >::type obsArray(obsArraySEXP);
    Rcpp::traits::input_parameter< IntegerVector >::type nSymbols(nSymbolsSEXP);
    Rcpp::traits::input_parameter< NumericMatrix >::type coefs(coefsSEXP);
    Rcpp::traits::input_parameter< NumericMatrix >::type X_(X_SEXP);
    Rcpp::traits::input_parameter< IntegerVector >::type numberOfStates(numberOfStatesSEXP);
    Rcpp::traits::input_parameter< int >::type itermax(itermaxSEXP);
    Rcpp::traits::input_parameter< double >::type tol(tolSEXP);
    Rcpp::traits::input_parameter< int >::type trace(traceSEXP);
    Rcpp::traits::input_parameter< int >::type threads(threadsSEXP);
    __result = Rcpp::wrap(log_EMx(transitionMatrix, emissionArray, initialProbs, obsArray, nSymbols, coefs, X_, numberOfStates, itermax, tol, trace, threads));
    return __result;
END_RCPP
}
// log_forwardbackward
List log_forwardbackward(NumericVector transitionMatrix, NumericVector emissionArray, NumericVector initialProbs, IntegerVector obsArray, bool forwardonly, int threads);
RcppExport SEXP seqHMM_log_forwardbackward(SEXP transitionMatrixSEXP, SEXP emissionArraySEXP, SEXP initialProbsSEXP, SEXP obsArraySEXP, SEXP forwardonlySEXP, SEXP threadsSEXP) {
BEGIN_RCPP
    Rcpp::RObject __result;
    Rcpp::RNGScope __rngScope;
    Rcpp::traits::input_parameter< NumericVector >::type transitionMatrix(transitionMatrixSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type emissionArray(emissionArraySEXP);
    Rcpp::traits::input_parameter< NumericVector >::type initialProbs(initialProbsSEXP);
    Rcpp::traits::input_parameter< IntegerVector >::type obsArray(obsArraySEXP);
    Rcpp::traits::input_parameter< bool >::type forwardonly(forwardonlySEXP);
    Rcpp::traits::input_parameter< int >::type threads(threadsSEXP);
    __result = Rcpp::wrap(log_forwardbackward(transitionMatrix, emissionArray, initialProbs, obsArray, forwardonly, threads));
    return __result;
END_RCPP
}
// log_forwardbackwardx
List log_forwardbackwardx(NumericVector transitionMatrix, NumericVector emissionArray, NumericVector initialProbs, IntegerVector obsArray, NumericMatrix coefs, NumericMatrix X_, IntegerVector numberOfStates, bool forwardonly, int threads);
RcppExport SEXP seqHMM_log_forwardbackwardx(SEXP transitionMatrixSEXP, SEXP emissionArraySEXP, SEXP initialProbsSEXP, SEXP obsArraySEXP, SEXP coefsSEXP, SEXP X_SEXP, SEXP numberOfStatesSEXP, SEXP forwardonlySEXP, SEXP threadsSEXP) {
BEGIN_RCPP
    Rcpp::RObject __result;
    Rcpp::RNGScope __rngScope;
    Rcpp::traits::input_parameter< NumericVector >::type transitionMatrix(transitionMatrixSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type emissionArray(emissionArraySEXP);
    Rcpp::traits::input_parameter< NumericVector >::type initialProbs(initialProbsSEXP);
    Rcpp::traits::input_parameter< IntegerVector >::type obsArray(obsArraySEXP);
    Rcpp::traits::input_parameter< NumericMatrix >::type coefs(coefsSEXP);
    Rcpp::traits::input_parameter< NumericMatrix >::type X_(X_SEXP);
    Rcpp::traits::input_parameter< IntegerVector >::type numberOfStates(numberOfStatesSEXP);
    Rcpp::traits::input_parameter< bool >::type forwardonly(forwardonlySEXP);
    Rcpp::traits::input_parameter< int >::type threads(threadsSEXP);
    __result = Rcpp::wrap(log_forwardbackwardx(transitionMatrix, emissionArray, initialProbs, obsArray, coefs, X_, numberOfStates, forwardonly, threads));
    return __result;
END_RCPP
}
// log_logLikHMM
NumericVector log_logLikHMM(NumericVector transitionMatrix, NumericVector emissionArray, NumericVector initialProbs, IntegerVector obsArray, int threads);
RcppExport SEXP seqHMM_log_logLikHMM(SEXP transitionMatrixSEXP, SEXP emissionArraySEXP, SEXP initialProbsSEXP, SEXP obsArraySEXP, SEXP threadsSEXP) {
BEGIN_RCPP
    Rcpp::RObject __result;
    Rcpp::RNGScope __rngScope;
    Rcpp::traits::input_parameter< NumericVector >::type transitionMatrix(transitionMatrixSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type emissionArray(emissionArraySEXP);
    Rcpp::traits::input_parameter< NumericVector >::type initialProbs(initialProbsSEXP);
    Rcpp::traits::input_parameter< IntegerVector >::type obsArray(obsArraySEXP);
    Rcpp::traits::input_parameter< int >::type threads(threadsSEXP);
    __result = Rcpp::wrap(log_logLikHMM(transitionMatrix, emissionArray, initialProbs, obsArray, threads));
    return __result;
END_RCPP
}
// log_logLikMixHMM
NumericVector log_logLikMixHMM(NumericVector transitionMatrix, NumericVector emissionArray, NumericVector initialProbs, IntegerVector obsArray, NumericMatrix coefs, NumericMatrix X_, IntegerVector numberOfStates, int threads);
RcppExport SEXP seqHMM_log_logLikMixHMM(SEXP transitionMatrixSEXP, SEXP emissionArraySEXP, SEXP initialProbsSEXP, SEXP obsArraySEXP, SEXP coefsSEXP, SEXP X_SEXP, SEXP numberOfStatesSEXP, SEXP threadsSEXP) {
BEGIN_RCPP
    Rcpp::RObject __result;
    Rcpp::RNGScope __rngScope;
    Rcpp::traits::input_parameter< NumericVector >::type transitionMatrix(transitionMatrixSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type emissionArray(emissionArraySEXP);
    Rcpp::traits::input_parameter< NumericVector >::type initialProbs(initialProbsSEXP);
    Rcpp::traits::input_parameter< IntegerVector >::type obsArray(obsArraySEXP);
    Rcpp::traits::input_parameter< NumericMatrix >::type coefs(coefsSEXP);
    Rcpp::traits::input_parameter< NumericMatrix >::type X_(X_SEXP);
    Rcpp::traits::input_parameter< IntegerVector >::type numberOfStates(numberOfStatesSEXP);
    Rcpp::traits::input_parameter< int >::type threads(threadsSEXP);
    __result = Rcpp::wrap(log_logLikMixHMM(transitionMatrix, emissionArray, initialProbs, obsArray, coefs, X_, numberOfStates, threads));
    return __result;
END_RCPP
}
// log_objective
List log_objective(NumericVector transitionMatrix, NumericVector emissionArray, NumericVector initialProbs, IntegerVector obsArray, IntegerVector transNZ, IntegerVector emissNZ, IntegerVector initNZ, IntegerVector nSymbols, int threads);
RcppExport SEXP seqHMM_log_objective(SEXP transitionMatrixSEXP, SEXP emissionArraySEXP, SEXP initialProbsSEXP, SEXP obsArraySEXP, SEXP transNZSEXP, SEXP emissNZSEXP, SEXP initNZSEXP, SEXP nSymbolsSEXP, SEXP threadsSEXP) {
BEGIN_RCPP
    Rcpp::RObject __result;
    Rcpp::RNGScope __rngScope;
    Rcpp::traits::input_parameter< NumericVector >::type transitionMatrix(transitionMatrixSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type emissionArray(emissionArraySEXP);
    Rcpp::traits::input_parameter< NumericVector >::type initialProbs(initialProbsSEXP);
    Rcpp::traits::input_parameter< IntegerVector >::type obsArray(obsArraySEXP);
    Rcpp::traits::input_parameter< IntegerVector >::type transNZ(transNZSEXP);
    Rcpp::traits::input_parameter< IntegerVector >::type emissNZ(emissNZSEXP);
    Rcpp::traits::input_parameter< IntegerVector >::type initNZ(initNZSEXP);
    Rcpp::traits::input_parameter< IntegerVector >::type nSymbols(nSymbolsSEXP);
    Rcpp::traits::input_parameter< int >::type threads(threadsSEXP);
    __result = Rcpp::wrap(log_objective(transitionMatrix, emissionArray, initialProbs, obsArray, transNZ, emissNZ, initNZ, nSymbols, threads));
    return __result;
END_RCPP
}
// log_objectivex2
List log_objectivex2(NumericVector transitionMatrix, NumericVector emissionArray, NumericVector initialProbs, IntegerVector obsArray, IntegerVector transNZ, IntegerVector emissNZ, IntegerVector initNZ, IntegerVector nSymbols, NumericMatrix coefs, NumericMatrix X_, IntegerVector numberOfStates, int threads);
RcppExport SEXP seqHMM_log_objectivex2(SEXP transitionMatrixSEXP, SEXP emissionArraySEXP, SEXP initialProbsSEXP, SEXP obsArraySEXP, SEXP transNZSEXP, SEXP emissNZSEXP, SEXP initNZSEXP, SEXP nSymbolsSEXP, SEXP coefsSEXP, SEXP X_SEXP, SEXP numberOfStatesSEXP, SEXP threadsSEXP) {
BEGIN_RCPP
    Rcpp::RObject __result;
    Rcpp::RNGScope __rngScope;
    Rcpp::traits::input_parameter< NumericVector >::type transitionMatrix(transitionMatrixSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type emissionArray(emissionArraySEXP);
    Rcpp::traits::input_parameter< NumericVector >::type initialProbs(initialProbsSEXP);
    Rcpp::traits::input_parameter< IntegerVector >::type obsArray(obsArraySEXP);
    Rcpp::traits::input_parameter< IntegerVector >::type transNZ(transNZSEXP);
    Rcpp::traits::input_parameter< IntegerVector >::type emissNZ(emissNZSEXP);
    Rcpp::traits::input_parameter< IntegerVector >::type initNZ(initNZSEXP);
    Rcpp::traits::input_parameter< IntegerVector >::type nSymbols(nSymbolsSEXP);
    Rcpp::traits::input_parameter< NumericMatrix >::type coefs(coefsSEXP);
    Rcpp::traits::input_parameter< NumericMatrix >::type X_(X_SEXP);
    Rcpp::traits::input_parameter< IntegerVector >::type numberOfStates(numberOfStatesSEXP);
    Rcpp::traits::input_parameter< int >::type threads(threadsSEXP);
    __result = Rcpp::wrap(log_objectivex2(transitionMatrix, emissionArray, initialProbs, obsArray, transNZ, emissNZ, initNZ, nSymbols, coefs, X_, numberOfStates, threads));
    return __result;
END_RCPP
}
// log_objectivex
List log_objectivex(NumericVector transitionMatrix, NumericVector emissionArray, NumericVector initialProbs, IntegerVector obsArray, IntegerVector transNZ, IntegerVector emissNZ, IntegerVector initNZ, IntegerVector nSymbols, NumericMatrix coefs, NumericMatrix X_, IntegerVector numberOfStates, int threads);
RcppExport SEXP seqHMM_log_objectivex(SEXP transitionMatrixSEXP, SEXP emissionArraySEXP, SEXP initialProbsSEXP, SEXP obsArraySEXP, SEXP transNZSEXP, SEXP emissNZSEXP, SEXP initNZSEXP, SEXP nSymbolsSEXP, SEXP coefsSEXP, SEXP X_SEXP, SEXP numberOfStatesSEXP, SEXP threadsSEXP) {
BEGIN_RCPP
    Rcpp::RObject __result;
    Rcpp::RNGScope __rngScope;
    Rcpp::traits::input_parameter< NumericVector >::type transitionMatrix(transitionMatrixSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type emissionArray(emissionArraySEXP);
    Rcpp::traits::input_parameter< NumericVector >::type initialProbs(initialProbsSEXP);
    Rcpp::traits::input_parameter< IntegerVector >::type obsArray(obsArraySEXP);
    Rcpp::traits::input_parameter< IntegerVector >::type transNZ(transNZSEXP);
    Rcpp::traits::input_parameter< IntegerVector >::type emissNZ(emissNZSEXP);
    Rcpp::traits::input_parameter< IntegerVector >::type initNZ(initNZSEXP);
    Rcpp::traits::input_parameter< IntegerVector >::type nSymbols(nSymbolsSEXP);
    Rcpp::traits::input_parameter< NumericMatrix >::type coefs(coefsSEXP);
    Rcpp::traits::input_parameter< NumericMatrix >::type X_(X_SEXP);
    Rcpp::traits::input_parameter< IntegerVector >::type numberOfStates(numberOfStatesSEXP);
    Rcpp::traits::input_parameter< int >::type threads(threadsSEXP);
    __result = Rcpp::wrap(log_objectivex(transitionMatrix, emissionArray, initialProbs, obsArray, transNZ, emissNZ, initNZ, nSymbols, coefs, X_, numberOfStates, threads));
    return __result;
END_RCPP
}
// logLikHMM
NumericVector logLikHMM(NumericVector transitionMatrix, NumericVector emissionArray, NumericVector initialProbs, IntegerVector obsArray, int threads);
RcppExport SEXP seqHMM_logLikHMM(SEXP transitionMatrixSEXP, SEXP emissionArraySEXP, SEXP initialProbsSEXP, SEXP obsArraySEXP, SEXP threadsSEXP) {
BEGIN_RCPP
    Rcpp::RObject __result;
    Rcpp::RNGScope __rngScope;
    Rcpp::traits::input_parameter< NumericVector >::type transitionMatrix(transitionMatrixSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type emissionArray(emissionArraySEXP);
    Rcpp::traits::input_parameter< NumericVector >::type initialProbs(initialProbsSEXP);
    Rcpp::traits::input_parameter< IntegerVector >::type obsArray(obsArraySEXP);
    Rcpp::traits::input_parameter< int >::type threads(threadsSEXP);
    __result = Rcpp::wrap(logLikHMM(transitionMatrix, emissionArray, initialProbs, obsArray, threads));
    return __result;
END_RCPP
}
// logLikMixHMM
NumericVector logLikMixHMM(NumericVector transitionMatrix, NumericVector emissionArray, NumericVector initialProbs, IntegerVector obsArray, NumericMatrix coefs, NumericMatrix X_, IntegerVector numberOfStates, int threads);
RcppExport SEXP seqHMM_logLikMixHMM(SEXP transitionMatrixSEXP, SEXP emissionArraySEXP, SEXP initialProbsSEXP, SEXP obsArraySEXP, SEXP coefsSEXP, SEXP X_SEXP, SEXP numberOfStatesSEXP, SEXP threadsSEXP) {
BEGIN_RCPP
    Rcpp::RObject __result;
    Rcpp::RNGScope __rngScope;
    Rcpp::traits::input_parameter< NumericVector >::type transitionMatrix(transitionMatrixSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type emissionArray(emissionArraySEXP);
    Rcpp::traits::input_parameter< NumericVector >::type initialProbs(initialProbsSEXP);
    Rcpp::traits::input_parameter< IntegerVector >::type obsArray(obsArraySEXP);
    Rcpp::traits::input_parameter< NumericMatrix >::type coefs(coefsSEXP);
    Rcpp::traits::input_parameter< NumericMatrix >::type X_(X_SEXP);
    Rcpp::traits::input_parameter< IntegerVector >::type numberOfStates(numberOfStatesSEXP);
    Rcpp::traits::input_parameter< int >::type threads(threadsSEXP);
    __result = Rcpp::wrap(logLikMixHMM(transitionMatrix, emissionArray, initialProbs, obsArray, coefs, X_, numberOfStates, threads));
    return __result;
END_RCPP
}
// logSumExp
double logSumExp(const arma::vec& x);
RcppExport SEXP seqHMM_logSumExp(SEXP xSEXP) {
BEGIN_RCPP
    Rcpp::RObject __result;
    Rcpp::RNGScope __rngScope;
    Rcpp::traits::input_parameter< const arma::vec& >::type x(xSEXP);
    __result = Rcpp::wrap(logSumExp(x));
    return __result;
END_RCPP
}
// objective
List objective(NumericVector transitionMatrix, NumericVector emissionArray, NumericVector initialProbs, IntegerVector obsArray, IntegerVector transNZ, IntegerVector emissNZ, IntegerVector initNZ, IntegerVector nSymbols, int threads);
RcppExport SEXP seqHMM_objective(SEXP transitionMatrixSEXP, SEXP emissionArraySEXP, SEXP initialProbsSEXP, SEXP obsArraySEXP, SEXP transNZSEXP, SEXP emissNZSEXP, SEXP initNZSEXP, SEXP nSymbolsSEXP, SEXP threadsSEXP) {
BEGIN_RCPP
    Rcpp::RObject __result;
    Rcpp::RNGScope __rngScope;
    Rcpp::traits::input_parameter< NumericVector >::type transitionMatrix(transitionMatrixSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type emissionArray(emissionArraySEXP);
    Rcpp::traits::input_parameter< NumericVector >::type initialProbs(initialProbsSEXP);
    Rcpp::traits::input_parameter< IntegerVector >::type obsArray(obsArraySEXP);
    Rcpp::traits::input_parameter< IntegerVector >::type transNZ(transNZSEXP);
    Rcpp::traits::input_parameter< IntegerVector >::type emissNZ(emissNZSEXP);
    Rcpp::traits::input_parameter< IntegerVector >::type initNZ(initNZSEXP);
    Rcpp::traits::input_parameter< IntegerVector >::type nSymbols(nSymbolsSEXP);
    Rcpp::traits::input_parameter< int >::type threads(threadsSEXP);
    __result = Rcpp::wrap(objective(transitionMatrix, emissionArray, initialProbs, obsArray, transNZ, emissNZ, initNZ, nSymbols, threads));
    return __result;
END_RCPP
}
// objectivex
List objectivex(NumericVector transitionMatrix, NumericVector emissionArray, NumericVector initialProbs, IntegerVector obsArray, IntegerVector transNZ, IntegerVector emissNZ, IntegerVector initNZ, IntegerVector nSymbols, NumericMatrix coefs, NumericMatrix X_, IntegerVector numberOfStates, int threads);
RcppExport SEXP seqHMM_objectivex(SEXP transitionMatrixSEXP, SEXP emissionArraySEXP, SEXP initialProbsSEXP, SEXP obsArraySEXP, SEXP transNZSEXP, SEXP emissNZSEXP, SEXP initNZSEXP, SEXP nSymbolsSEXP, SEXP coefsSEXP, SEXP X_SEXP, SEXP numberOfStatesSEXP, SEXP threadsSEXP) {
BEGIN_RCPP
    Rcpp::RObject __result;
    Rcpp::RNGScope __rngScope;
    Rcpp::traits::input_parameter< NumericVector >::type transitionMatrix(transitionMatrixSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type emissionArray(emissionArraySEXP);
    Rcpp::traits::input_parameter< NumericVector >::type initialProbs(initialProbsSEXP);
    Rcpp::traits::input_parameter< IntegerVector >::type obsArray(obsArraySEXP);
    Rcpp::traits::input_parameter< IntegerVector >::type transNZ(transNZSEXP);
    Rcpp::traits::input_parameter< IntegerVector >::type emissNZ(emissNZSEXP);
    Rcpp::traits::input_parameter< IntegerVector >::type initNZ(initNZSEXP);
    Rcpp::traits::input_parameter< IntegerVector >::type nSymbols(nSymbolsSEXP);
    Rcpp::traits::input_parameter< NumericMatrix >::type coefs(coefsSEXP);
    Rcpp::traits::input_parameter< NumericMatrix >::type X_(X_SEXP);
    Rcpp::traits::input_parameter< IntegerVector >::type numberOfStates(numberOfStatesSEXP);
    Rcpp::traits::input_parameter< int >::type threads(threadsSEXP);
    __result = Rcpp::wrap(objectivex(transitionMatrix, emissionArray, initialProbs, obsArray, transNZ, emissNZ, initNZ, nSymbols, coefs, X_, numberOfStates, threads));
    return __result;
END_RCPP
}
// varcoef
NumericMatrix varcoef(NumericMatrix coefs, NumericMatrix X_, IntegerVector numberOfStates);
RcppExport SEXP seqHMM_varcoef(SEXP coefsSEXP, SEXP X_SEXP, SEXP numberOfStatesSEXP) {
BEGIN_RCPP
    Rcpp::RObject __result;
    Rcpp::RNGScope __rngScope;
    Rcpp::traits::input_parameter< NumericMatrix >::type coefs(coefsSEXP);
    Rcpp::traits::input_parameter< NumericMatrix >::type X_(X_SEXP);
    Rcpp::traits::input_parameter< IntegerVector >::type numberOfStates(numberOfStatesSEXP);
    __result = Rcpp::wrap(varcoef(coefs, X_, numberOfStates));
    return __result;
END_RCPP
}
// viterbi
List viterbi(NumericVector transitionMatrix, NumericVector emissionArray, NumericVector initialProbs, IntegerVector obsArray);
RcppExport SEXP seqHMM_viterbi(SEXP transitionMatrixSEXP, SEXP emissionArraySEXP, SEXP initialProbsSEXP, SEXP obsArraySEXP) {
BEGIN_RCPP
    Rcpp::RObject __result;
    Rcpp::RNGScope __rngScope;
    Rcpp::traits::input_parameter< NumericVector >::type transitionMatrix(transitionMatrixSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type emissionArray(emissionArraySEXP);
    Rcpp::traits::input_parameter< NumericVector >::type initialProbs(initialProbsSEXP);
    Rcpp::traits::input_parameter< IntegerVector >::type obsArray(obsArraySEXP);
    __result = Rcpp::wrap(viterbi(transitionMatrix, emissionArray, initialProbs, obsArray));
    return __result;
END_RCPP
}
// viterbix
List viterbix(NumericVector transitionMatrix, NumericVector emissionArray, NumericVector initialProbs, IntegerVector obsArray, NumericMatrix coefs, NumericMatrix X_, IntegerVector numberOfStates);
RcppExport SEXP seqHMM_viterbix(SEXP transitionMatrixSEXP, SEXP emissionArraySEXP, SEXP initialProbsSEXP, SEXP obsArraySEXP, SEXP coefsSEXP, SEXP X_SEXP, SEXP numberOfStatesSEXP) {
BEGIN_RCPP
    Rcpp::RObject __result;
    Rcpp::RNGScope __rngScope;
    Rcpp::traits::input_parameter< NumericVector >::type transitionMatrix(transitionMatrixSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type emissionArray(emissionArraySEXP);
    Rcpp::traits::input_parameter< NumericVector >::type initialProbs(initialProbsSEXP);
    Rcpp::traits::input_parameter< IntegerVector >::type obsArray(obsArraySEXP);
    Rcpp::traits::input_parameter< NumericMatrix >::type coefs(coefsSEXP);
    Rcpp::traits::input_parameter< NumericMatrix >::type X_(X_SEXP);
    Rcpp::traits::input_parameter< IntegerVector >::type numberOfStates(numberOfStatesSEXP);
    __result = Rcpp::wrap(viterbix(transitionMatrix, emissionArray, initialProbs, obsArray, coefs, X_, numberOfStates));
    return __result;
END_RCPP
}
