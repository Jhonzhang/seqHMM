// This file was generated by Rcpp::compileAttributes
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include <RcppArmadillo.h>
#include <Rcpp.h>

using namespace Rcpp;

// backward
NumericVector backward(NumericVector transitionMatrix, NumericVector emissionArray, IntegerVector obsArray);
RcppExport SEXP seqHMM_backward(SEXP transitionMatrixSEXP, SEXP emissionArraySEXP, SEXP obsArraySEXP) {
BEGIN_RCPP
    Rcpp::RObject __result;
    Rcpp::RNGScope __rngScope;
    Rcpp::traits::input_parameter< NumericVector >::type transitionMatrix(transitionMatrixSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type emissionArray(emissionArraySEXP);
    Rcpp::traits::input_parameter< IntegerVector >::type obsArray(obsArraySEXP);
    __result = Rcpp::wrap(backward(transitionMatrix, emissionArray, obsArray));
    return __result;
END_RCPP
}
// EM
List EM(NumericVector transitionMatrix, NumericVector emissionArray, NumericVector initialProbs, IntegerVector obsArray, IntegerVector nSymbols, int itermax, double tol, int trace);
RcppExport SEXP seqHMM_EM(SEXP transitionMatrixSEXP, SEXP emissionArraySEXP, SEXP initialProbsSEXP, SEXP obsArraySEXP, SEXP nSymbolsSEXP, SEXP itermaxSEXP, SEXP tolSEXP, SEXP traceSEXP) {
BEGIN_RCPP
    Rcpp::RObject __result;
    Rcpp::RNGScope __rngScope;
    Rcpp::traits::input_parameter< NumericVector >::type transitionMatrix(transitionMatrixSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type emissionArray(emissionArraySEXP);
    Rcpp::traits::input_parameter< NumericVector >::type initialProbs(initialProbsSEXP);
    Rcpp::traits::input_parameter< IntegerVector >::type obsArray(obsArraySEXP);
    Rcpp::traits::input_parameter< IntegerVector >::type nSymbols(nSymbolsSEXP);
    Rcpp::traits::input_parameter< int >::type itermax(itermaxSEXP);
    Rcpp::traits::input_parameter< double >::type tol(tolSEXP);
    Rcpp::traits::input_parameter< int >::type trace(traceSEXP);
    __result = Rcpp::wrap(EM(transitionMatrix, emissionArray, initialProbs, obsArray, nSymbols, itermax, tol, trace));
    return __result;
END_RCPP
}
// EMx
List EMx(NumericVector transitionMatrix, NumericVector emissionArray, NumericVector initialProbs, IntegerVector obsArray, IntegerVector nSymbols, NumericMatrix coefs, NumericMatrix X_, IntegerVector numberOfStates, int itermax, double tol, int trace);
RcppExport SEXP seqHMM_EMx(SEXP transitionMatrixSEXP, SEXP emissionArraySEXP, SEXP initialProbsSEXP, SEXP obsArraySEXP, SEXP nSymbolsSEXP, SEXP coefsSEXP, SEXP X_SEXP, SEXP numberOfStatesSEXP, SEXP itermaxSEXP, SEXP tolSEXP, SEXP traceSEXP) {
BEGIN_RCPP
    Rcpp::RObject __result;
    Rcpp::RNGScope __rngScope;
    Rcpp::traits::input_parameter< NumericVector >::type transitionMatrix(transitionMatrixSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type emissionArray(emissionArraySEXP);
    Rcpp::traits::input_parameter< NumericVector >::type initialProbs(initialProbsSEXP);
    Rcpp::traits::input_parameter< IntegerVector >::type obsArray(obsArraySEXP);
    Rcpp::traits::input_parameter< IntegerVector >::type nSymbols(nSymbolsSEXP);
    Rcpp::traits::input_parameter< NumericMatrix >::type coefs(coefsSEXP);
    Rcpp::traits::input_parameter< NumericMatrix >::type X_(X_SEXP);
    Rcpp::traits::input_parameter< IntegerVector >::type numberOfStates(numberOfStatesSEXP);
    Rcpp::traits::input_parameter< int >::type itermax(itermaxSEXP);
    Rcpp::traits::input_parameter< double >::type tol(tolSEXP);
    Rcpp::traits::input_parameter< int >::type trace(traceSEXP);
    __result = Rcpp::wrap(EMx(transitionMatrix, emissionArray, initialProbs, obsArray, nSymbols, coefs, X_, numberOfStates, itermax, tol, trace));
    return __result;
END_RCPP
}
// forward
NumericVector forward(NumericVector transitionMatrix, NumericVector emissionArray, NumericVector initialProbs, IntegerVector obsArray);
RcppExport SEXP seqHMM_forward(SEXP transitionMatrixSEXP, SEXP emissionArraySEXP, SEXP initialProbsSEXP, SEXP obsArraySEXP) {
BEGIN_RCPP
    Rcpp::RObject __result;
    Rcpp::RNGScope __rngScope;
    Rcpp::traits::input_parameter< NumericVector >::type transitionMatrix(transitionMatrixSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type emissionArray(emissionArraySEXP);
    Rcpp::traits::input_parameter< NumericVector >::type initialProbs(initialProbsSEXP);
    Rcpp::traits::input_parameter< IntegerVector >::type obsArray(obsArraySEXP);
    __result = Rcpp::wrap(forward(transitionMatrix, emissionArray, initialProbs, obsArray));
    return __result;
END_RCPP
}
// forwardx
NumericVector forwardx(NumericVector transitionMatrix, NumericVector emissionArray, NumericVector initialProbs, IntegerVector obsArray, NumericMatrix coefs, NumericMatrix X_, IntegerVector numberOfStates);
RcppExport SEXP seqHMM_forwardx(SEXP transitionMatrixSEXP, SEXP emissionArraySEXP, SEXP initialProbsSEXP, SEXP obsArraySEXP, SEXP coefsSEXP, SEXP X_SEXP, SEXP numberOfStatesSEXP) {
BEGIN_RCPP
    Rcpp::RObject __result;
    Rcpp::RNGScope __rngScope;
    Rcpp::traits::input_parameter< NumericVector >::type transitionMatrix(transitionMatrixSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type emissionArray(emissionArraySEXP);
    Rcpp::traits::input_parameter< NumericVector >::type initialProbs(initialProbsSEXP);
    Rcpp::traits::input_parameter< IntegerVector >::type obsArray(obsArraySEXP);
    Rcpp::traits::input_parameter< NumericMatrix >::type coefs(coefsSEXP);
    Rcpp::traits::input_parameter< NumericMatrix >::type X_(X_SEXP);
    Rcpp::traits::input_parameter< IntegerVector >::type numberOfStates(numberOfStatesSEXP);
    __result = Rcpp::wrap(forwardx(transitionMatrix, emissionArray, initialProbs, obsArray, coefs, X_, numberOfStates));
    return __result;
END_RCPP
}
// gradbeta
NumericVector gradbeta(NumericVector transitionMatrix, NumericVector emissionArray, NumericVector initialProbs, IntegerVector obsArray, IntegerVector nSymbols, NumericMatrix coefs, NumericMatrix X_, IntegerVector numberOfStates);
RcppExport SEXP seqHMM_gradbeta(SEXP transitionMatrixSEXP, SEXP emissionArraySEXP, SEXP initialProbsSEXP, SEXP obsArraySEXP, SEXP nSymbolsSEXP, SEXP coefsSEXP, SEXP X_SEXP, SEXP numberOfStatesSEXP) {
BEGIN_RCPP
    Rcpp::RObject __result;
    Rcpp::RNGScope __rngScope;
    Rcpp::traits::input_parameter< NumericVector >::type transitionMatrix(transitionMatrixSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type emissionArray(emissionArraySEXP);
    Rcpp::traits::input_parameter< NumericVector >::type initialProbs(initialProbsSEXP);
    Rcpp::traits::input_parameter< IntegerVector >::type obsArray(obsArraySEXP);
    Rcpp::traits::input_parameter< IntegerVector >::type nSymbols(nSymbolsSEXP);
    Rcpp::traits::input_parameter< NumericMatrix >::type coefs(coefsSEXP);
    Rcpp::traits::input_parameter< NumericMatrix >::type X_(X_SEXP);
    Rcpp::traits::input_parameter< IntegerVector >::type numberOfStates(numberOfStatesSEXP);
    __result = Rcpp::wrap(gradbeta(transitionMatrix, emissionArray, initialProbs, obsArray, nSymbols, coefs, X_, numberOfStates));
    return __result;
END_RCPP
}
// logLikHMM
NumericVector logLikHMM(NumericVector transitionMatrix, NumericVector emissionArray, NumericVector initialProbs, IntegerVector obsArray);
RcppExport SEXP seqHMM_logLikHMM(SEXP transitionMatrixSEXP, SEXP emissionArraySEXP, SEXP initialProbsSEXP, SEXP obsArraySEXP) {
BEGIN_RCPP
    Rcpp::RObject __result;
    Rcpp::RNGScope __rngScope;
    Rcpp::traits::input_parameter< NumericVector >::type transitionMatrix(transitionMatrixSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type emissionArray(emissionArraySEXP);
    Rcpp::traits::input_parameter< NumericVector >::type initialProbs(initialProbsSEXP);
    Rcpp::traits::input_parameter< IntegerVector >::type obsArray(obsArraySEXP);
    __result = Rcpp::wrap(logLikHMM(transitionMatrix, emissionArray, initialProbs, obsArray));
    return __result;
END_RCPP
}
// logLikMixHMM
NumericVector logLikMixHMM(NumericVector transitionMatrix, NumericVector emissionArray, NumericVector initialProbs, IntegerVector obsArray, NumericMatrix coefs, NumericMatrix X_, IntegerVector numberOfStates);
RcppExport SEXP seqHMM_logLikMixHMM(SEXP transitionMatrixSEXP, SEXP emissionArraySEXP, SEXP initialProbsSEXP, SEXP obsArraySEXP, SEXP coefsSEXP, SEXP X_SEXP, SEXP numberOfStatesSEXP) {
BEGIN_RCPP
    Rcpp::RObject __result;
    Rcpp::RNGScope __rngScope;
    Rcpp::traits::input_parameter< NumericVector >::type transitionMatrix(transitionMatrixSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type emissionArray(emissionArraySEXP);
    Rcpp::traits::input_parameter< NumericVector >::type initialProbs(initialProbsSEXP);
    Rcpp::traits::input_parameter< IntegerVector >::type obsArray(obsArraySEXP);
    Rcpp::traits::input_parameter< NumericMatrix >::type coefs(coefsSEXP);
    Rcpp::traits::input_parameter< NumericMatrix >::type X_(X_SEXP);
    Rcpp::traits::input_parameter< IntegerVector >::type numberOfStates(numberOfStatesSEXP);
    __result = Rcpp::wrap(logLikMixHMM(transitionMatrix, emissionArray, initialProbs, obsArray, coefs, X_, numberOfStates));
    return __result;
END_RCPP
}
// objective
List objective(NumericVector transitionMatrix, NumericVector emissionArray, NumericVector initialProbs, IntegerVector obsArray, IntegerVector transNZ, IntegerVector emissNZ, IntegerVector initNZ, IntegerVector nSymbols);
RcppExport SEXP seqHMM_objective(SEXP transitionMatrixSEXP, SEXP emissionArraySEXP, SEXP initialProbsSEXP, SEXP obsArraySEXP, SEXP transNZSEXP, SEXP emissNZSEXP, SEXP initNZSEXP, SEXP nSymbolsSEXP) {
BEGIN_RCPP
    Rcpp::RObject __result;
    Rcpp::RNGScope __rngScope;
    Rcpp::traits::input_parameter< NumericVector >::type transitionMatrix(transitionMatrixSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type emissionArray(emissionArraySEXP);
    Rcpp::traits::input_parameter< NumericVector >::type initialProbs(initialProbsSEXP);
    Rcpp::traits::input_parameter< IntegerVector >::type obsArray(obsArraySEXP);
    Rcpp::traits::input_parameter< IntegerVector >::type transNZ(transNZSEXP);
    Rcpp::traits::input_parameter< IntegerVector >::type emissNZ(emissNZSEXP);
    Rcpp::traits::input_parameter< IntegerVector >::type initNZ(initNZSEXP);
    Rcpp::traits::input_parameter< IntegerVector >::type nSymbols(nSymbolsSEXP);
    __result = Rcpp::wrap(objective(transitionMatrix, emissionArray, initialProbs, obsArray, transNZ, emissNZ, initNZ, nSymbols));
    return __result;
END_RCPP
}
// objectivex
List objectivex(NumericVector transitionMatrix, NumericVector emissionArray, NumericVector initialProbs, IntegerVector obsArray, IntegerVector transNZ, IntegerVector emissNZ, IntegerVector initNZ, IntegerVector nSymbols, NumericMatrix coefs, NumericMatrix X_, IntegerVector numberOfStates);
RcppExport SEXP seqHMM_objectivex(SEXP transitionMatrixSEXP, SEXP emissionArraySEXP, SEXP initialProbsSEXP, SEXP obsArraySEXP, SEXP transNZSEXP, SEXP emissNZSEXP, SEXP initNZSEXP, SEXP nSymbolsSEXP, SEXP coefsSEXP, SEXP X_SEXP, SEXP numberOfStatesSEXP) {
BEGIN_RCPP
    Rcpp::RObject __result;
    Rcpp::RNGScope __rngScope;
    Rcpp::traits::input_parameter< NumericVector >::type transitionMatrix(transitionMatrixSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type emissionArray(emissionArraySEXP);
    Rcpp::traits::input_parameter< NumericVector >::type initialProbs(initialProbsSEXP);
    Rcpp::traits::input_parameter< IntegerVector >::type obsArray(obsArraySEXP);
    Rcpp::traits::input_parameter< IntegerVector >::type transNZ(transNZSEXP);
    Rcpp::traits::input_parameter< IntegerVector >::type emissNZ(emissNZSEXP);
    Rcpp::traits::input_parameter< IntegerVector >::type initNZ(initNZSEXP);
    Rcpp::traits::input_parameter< IntegerVector >::type nSymbols(nSymbolsSEXP);
    Rcpp::traits::input_parameter< NumericMatrix >::type coefs(coefsSEXP);
    Rcpp::traits::input_parameter< NumericMatrix >::type X_(X_SEXP);
    Rcpp::traits::input_parameter< IntegerVector >::type numberOfStates(numberOfStatesSEXP);
    __result = Rcpp::wrap(objectivex(transitionMatrix, emissionArray, initialProbs, obsArray, transNZ, emissNZ, initNZ, nSymbols, coefs, X_, numberOfStates));
    return __result;
END_RCPP
}
// viterbi
List viterbi(NumericVector transitionMatrix, NumericVector emissionArray, NumericVector initialProbs, IntegerVector obsArray);
RcppExport SEXP seqHMM_viterbi(SEXP transitionMatrixSEXP, SEXP emissionArraySEXP, SEXP initialProbsSEXP, SEXP obsArraySEXP) {
BEGIN_RCPP
    Rcpp::RObject __result;
    Rcpp::RNGScope __rngScope;
    Rcpp::traits::input_parameter< NumericVector >::type transitionMatrix(transitionMatrixSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type emissionArray(emissionArraySEXP);
    Rcpp::traits::input_parameter< NumericVector >::type initialProbs(initialProbsSEXP);
    Rcpp::traits::input_parameter< IntegerVector >::type obsArray(obsArraySEXP);
    __result = Rcpp::wrap(viterbi(transitionMatrix, emissionArray, initialProbs, obsArray));
    return __result;
END_RCPP
}
// viterbix
List viterbix(NumericVector transitionMatrix, NumericVector emissionArray, NumericVector initialProbs, IntegerVector obsArray, NumericMatrix coefs, NumericMatrix X_, IntegerVector numberOfStates);
RcppExport SEXP seqHMM_viterbix(SEXP transitionMatrixSEXP, SEXP emissionArraySEXP, SEXP initialProbsSEXP, SEXP obsArraySEXP, SEXP coefsSEXP, SEXP X_SEXP, SEXP numberOfStatesSEXP) {
BEGIN_RCPP
    Rcpp::RObject __result;
    Rcpp::RNGScope __rngScope;
    Rcpp::traits::input_parameter< NumericVector >::type transitionMatrix(transitionMatrixSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type emissionArray(emissionArraySEXP);
    Rcpp::traits::input_parameter< NumericVector >::type initialProbs(initialProbsSEXP);
    Rcpp::traits::input_parameter< IntegerVector >::type obsArray(obsArraySEXP);
    Rcpp::traits::input_parameter< NumericMatrix >::type coefs(coefsSEXP);
    Rcpp::traits::input_parameter< NumericMatrix >::type X_(X_SEXP);
    Rcpp::traits::input_parameter< IntegerVector >::type numberOfStates(numberOfStatesSEXP);
    __result = Rcpp::wrap(viterbix(transitionMatrix, emissionArray, initialProbs, obsArray, coefs, X_, numberOfStates));
    return __result;
END_RCPP
}
