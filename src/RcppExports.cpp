// This file was generated by Rcpp::compileAttributes
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include <RcppArmadillo.h>
#include <Rcpp.h>

using namespace Rcpp;

// backward
NumericVector backward(NumericVector transitionMatrix, NumericVector emissionArray, IntegerVector obsArray);
RcppExport SEXP seqHMM_backward(SEXP transitionMatrixSEXP, SEXP emissionArraySEXP, SEXP obsArraySEXP) {
BEGIN_RCPP
    SEXP __sexp_result;
    {
        Rcpp::RNGScope __rngScope;
        Rcpp::traits::input_parameter< NumericVector >::type transitionMatrix(transitionMatrixSEXP );
        Rcpp::traits::input_parameter< NumericVector >::type emissionArray(emissionArraySEXP );
        Rcpp::traits::input_parameter< IntegerVector >::type obsArray(obsArraySEXP );
        NumericVector __result = backward(transitionMatrix, emissionArray, obsArray);
        PROTECT(__sexp_result = Rcpp::wrap(__result));
    }
    UNPROTECT(1);
    return __sexp_result;
END_RCPP
}
// backwardMC
NumericVector backwardMC(NumericVector transitionMatrix, NumericVector emissionArray, IntegerVector obsArray);
RcppExport SEXP seqHMM_backwardMC(SEXP transitionMatrixSEXP, SEXP emissionArraySEXP, SEXP obsArraySEXP) {
BEGIN_RCPP
    SEXP __sexp_result;
    {
        Rcpp::RNGScope __rngScope;
        Rcpp::traits::input_parameter< NumericVector >::type transitionMatrix(transitionMatrixSEXP );
        Rcpp::traits::input_parameter< NumericVector >::type emissionArray(emissionArraySEXP );
        Rcpp::traits::input_parameter< IntegerVector >::type obsArray(obsArraySEXP );
        NumericVector __result = backwardMC(transitionMatrix, emissionArray, obsArray);
        PROTECT(__sexp_result = Rcpp::wrap(__result));
    }
    UNPROTECT(1);
    return __sexp_result;
END_RCPP
}
// EM
List EM(NumericVector transitionMatrix, NumericVector emissionArray, NumericVector initialProbs, IntegerVector obsArray, int nSymbols, int itermax = 100, double tol = 1e-8);
RcppExport SEXP seqHMM_EM(SEXP transitionMatrixSEXP, SEXP emissionArraySEXP, SEXP initialProbsSEXP, SEXP obsArraySEXP, SEXP nSymbolsSEXP, SEXP itermaxSEXP, SEXP tolSEXP) {
BEGIN_RCPP
    SEXP __sexp_result;
    {
        Rcpp::RNGScope __rngScope;
        Rcpp::traits::input_parameter< NumericVector >::type transitionMatrix(transitionMatrixSEXP );
        Rcpp::traits::input_parameter< NumericVector >::type emissionArray(emissionArraySEXP );
        Rcpp::traits::input_parameter< NumericVector >::type initialProbs(initialProbsSEXP );
        Rcpp::traits::input_parameter< IntegerVector >::type obsArray(obsArraySEXP );
        Rcpp::traits::input_parameter< int >::type nSymbols(nSymbolsSEXP );
        Rcpp::traits::input_parameter< int >::type itermax(itermaxSEXP );
        Rcpp::traits::input_parameter< double >::type tol(tolSEXP );
        List __result = EM(transitionMatrix, emissionArray, initialProbs, obsArray, nSymbols, itermax, tol);
        PROTECT(__sexp_result = Rcpp::wrap(__result));
    }
    UNPROTECT(1);
    return __sexp_result;
END_RCPP
}
// EMMC
List EMMC(NumericVector transitionMatrix, NumericVector emissionArray, NumericVector initialProbs, IntegerVector obsArray, IntegerVector nSymbols, int itermax = 100, double tol = 1e-8);
RcppExport SEXP seqHMM_EMMC(SEXP transitionMatrixSEXP, SEXP emissionArraySEXP, SEXP initialProbsSEXP, SEXP obsArraySEXP, SEXP nSymbolsSEXP, SEXP itermaxSEXP, SEXP tolSEXP) {
BEGIN_RCPP
    SEXP __sexp_result;
    {
        Rcpp::RNGScope __rngScope;
        Rcpp::traits::input_parameter< NumericVector >::type transitionMatrix(transitionMatrixSEXP );
        Rcpp::traits::input_parameter< NumericVector >::type emissionArray(emissionArraySEXP );
        Rcpp::traits::input_parameter< NumericVector >::type initialProbs(initialProbsSEXP );
        Rcpp::traits::input_parameter< IntegerVector >::type obsArray(obsArraySEXP );
        Rcpp::traits::input_parameter< IntegerVector >::type nSymbols(nSymbolsSEXP );
        Rcpp::traits::input_parameter< int >::type itermax(itermaxSEXP );
        Rcpp::traits::input_parameter< double >::type tol(tolSEXP );
        List __result = EMMC(transitionMatrix, emissionArray, initialProbs, obsArray, nSymbols, itermax, tol);
        PROTECT(__sexp_result = Rcpp::wrap(__result));
    }
    UNPROTECT(1);
    return __sexp_result;
END_RCPP
}
// forward
NumericVector forward(NumericVector transitionMatrix, NumericVector emissionArray, NumericVector initialProbs, IntegerVector obsArray);
RcppExport SEXP seqHMM_forward(SEXP transitionMatrixSEXP, SEXP emissionArraySEXP, SEXP initialProbsSEXP, SEXP obsArraySEXP) {
BEGIN_RCPP
    SEXP __sexp_result;
    {
        Rcpp::RNGScope __rngScope;
        Rcpp::traits::input_parameter< NumericVector >::type transitionMatrix(transitionMatrixSEXP );
        Rcpp::traits::input_parameter< NumericVector >::type emissionArray(emissionArraySEXP );
        Rcpp::traits::input_parameter< NumericVector >::type initialProbs(initialProbsSEXP );
        Rcpp::traits::input_parameter< IntegerVector >::type obsArray(obsArraySEXP );
        NumericVector __result = forward(transitionMatrix, emissionArray, initialProbs, obsArray);
        PROTECT(__sexp_result = Rcpp::wrap(__result));
    }
    UNPROTECT(1);
    return __sexp_result;
END_RCPP
}
// forwardMC
NumericVector forwardMC(NumericVector transitionMatrix, NumericVector emissionArray, NumericVector initialProbs, IntegerVector obsArray);
RcppExport SEXP seqHMM_forwardMC(SEXP transitionMatrixSEXP, SEXP emissionArraySEXP, SEXP initialProbsSEXP, SEXP obsArraySEXP) {
BEGIN_RCPP
    SEXP __sexp_result;
    {
        Rcpp::RNGScope __rngScope;
        Rcpp::traits::input_parameter< NumericVector >::type transitionMatrix(transitionMatrixSEXP );
        Rcpp::traits::input_parameter< NumericVector >::type emissionArray(emissionArraySEXP );
        Rcpp::traits::input_parameter< NumericVector >::type initialProbs(initialProbsSEXP );
        Rcpp::traits::input_parameter< IntegerVector >::type obsArray(obsArraySEXP );
        NumericVector __result = forwardMC(transitionMatrix, emissionArray, initialProbs, obsArray);
        PROTECT(__sexp_result = Rcpp::wrap(__result));
    }
    UNPROTECT(1);
    return __sexp_result;
END_RCPP
}
// logLikHMM
double logLikHMM(NumericVector transitionMatrix, NumericVector emissionArray, NumericVector initialProbs, IntegerVector obsArray);
RcppExport SEXP seqHMM_logLikHMM(SEXP transitionMatrixSEXP, SEXP emissionArraySEXP, SEXP initialProbsSEXP, SEXP obsArraySEXP) {
BEGIN_RCPP
    SEXP __sexp_result;
    {
        Rcpp::RNGScope __rngScope;
        Rcpp::traits::input_parameter< NumericVector >::type transitionMatrix(transitionMatrixSEXP );
        Rcpp::traits::input_parameter< NumericVector >::type emissionArray(emissionArraySEXP );
        Rcpp::traits::input_parameter< NumericVector >::type initialProbs(initialProbsSEXP );
        Rcpp::traits::input_parameter< IntegerVector >::type obsArray(obsArraySEXP );
        double __result = logLikHMM(transitionMatrix, emissionArray, initialProbs, obsArray);
        PROTECT(__sexp_result = Rcpp::wrap(__result));
    }
    UNPROTECT(1);
    return __sexp_result;
END_RCPP
}
// logLikMCHMM
double logLikMCHMM(NumericVector transitionMatrix, NumericVector emissionArray, NumericVector initialProbs, IntegerVector obsArray);
RcppExport SEXP seqHMM_logLikMCHMM(SEXP transitionMatrixSEXP, SEXP emissionArraySEXP, SEXP initialProbsSEXP, SEXP obsArraySEXP) {
BEGIN_RCPP
    SEXP __sexp_result;
    {
        Rcpp::RNGScope __rngScope;
        Rcpp::traits::input_parameter< NumericVector >::type transitionMatrix(transitionMatrixSEXP );
        Rcpp::traits::input_parameter< NumericVector >::type emissionArray(emissionArraySEXP );
        Rcpp::traits::input_parameter< NumericVector >::type initialProbs(initialProbsSEXP );
        Rcpp::traits::input_parameter< IntegerVector >::type obsArray(obsArraySEXP );
        double __result = logLikMCHMM(transitionMatrix, emissionArray, initialProbs, obsArray);
        PROTECT(__sexp_result = Rcpp::wrap(__result));
    }
    UNPROTECT(1);
    return __sexp_result;
END_RCPP
}
